#!/usr/bin/perl

use strict;
use warnings;
use v5.20;

use AppConfig::Std;
use LWP::UserAgent;
use HTTP::Request::Common;
use JSON;
#use Data::Dump;
use DB_File;
use Net::DNS;

use vars qw ($VERSION);
$VERSION = '1.1';

my %ttl = (
  '24h' => 24*3600,
  '8h'  =>  8*3600,
  '4h'  =>  4*3600,
  '2h'  =>  2*3600,
  '1h'  =>  1*3600,
  '10m' =>  10*60,
  '5m'  =>  5*60,
);

my $config = AppConfig::Std->new( { ERROR => sub { printf STDERR "Ignoring invalid argument: " . shift . "\n" } } );

# These are all the options that can be set in a config file or as an argument
$config->define("record_ttl|t=s",   { DEFAULT => '24h', VALIDATE => '^(24h|8h|4h|2h|1h|10m|5m)$' });
$config->define("delete|d!",        { DEFAULT => 0 });
$config->define("dryrun!",          { DEFAULT => 0 });
$config->define("clear|c!",         { DEFAULT => 0 });
$config->define("ddns!",            { DEFAULT => 0 });
$config->define("nons|n!",          { DEFAULT => 0 });
$config->define("quiet|q!",         { DEFAULT => 0 });
$config->define("cache=s",          { DEFAULT => '/dev/shm/vimexx.cache' });
$config->define("getip=s",          { DEFAULT => 'http://icanhazip.com' });
$config->define("login_id=i");
$config->define("login_secret=s");
$config->define("login_username=s");
$config->define("login_password=s");

# Collect options values from config files and/or arguments
my @files = ("/etc/vimexx-dns.conf", "$ENV{'HOME'}/.vimexx-dns", ".vimexx-dns");
map { $config->file($_) or die "Invalid configuration file" if -r $_ } @files;
$config->args() or die "Invalid arguments";

# Add remaining options that currently can't be set
$config->define("record_type|t=s",  { DEFAULT => $config->ddns ? "A" : "TXT", VALIDATE => '^(TXT|A)$' });
$config->define("record_name|n=s",  { DEFAULT => '_acme-challenge' });

# Debug mode enables verbose by default
$config->verbose(1) if $config->debug;

=pod

=head1 NAME

vimexx.pl - Manage DNS records on Vimexx.eu

=head1 SYNOPSIS

vimexx-dns [OPTION]... DOMAIN [CONTENT]

=head1 OPTIONS AND ARGUMENTS

  -t,-record_ttl     Specify the DNS TTL. Valid values are 24h (the default),
                     8h, 4h, 2h, 1h, 10m and 5m.
  -n,-nons           Do NOT use an authorative nameserver to find the actual TTL
                     of a DNS record. When this is set, all records will be set to
                     the TTL specified with -t.

  -d,-delete         Deletes the most recently added record, but only if
                     it was added in the last 600 seconds.
  -c,-clear          Clears the cache with the authentication token and
                     the DNS records, forcing renewal.

     -ddns           Run in dynamic DNS mode, obtaining the current IPv4
                     address and updating an A record.

     -help           Print this info
     -verbose        Verbose output
     -debug          Debug output
  -q,-quiet          Suppress all output

     -login_id       Vimexx API id
     -login_secret   Vimexx API secret
     -login_username Vimexx login
     -login_password Vimexx password

     -cache          Set location of cache - defaults to '/dev/shm/vimexx.cache'

     -getip          Set URL which returns public IPv4 - defaults to 'http://icanhazip.com'

=head1 DESCRIPTION

This script uses the Vimexx API to add or delete DNS records for a domain
hosted by the Vimexx nameserver.

The main purpose of this script is to enable Certbot to validate domain
ownership using a DNS-01 challenge, and to automate this procedure.

It is also be possible to update a record in your domain with the current
public IPv4 address of your internet connection, thus avoiding the use of
a 3th party dynamic DNS service.

Note that the Vimexx API does not return the TTL of a DNS record. By default,
the script will use an authorative nameserver to find the actual TTL of a DNS
record. If this fails, or is disabled with the -n option, the TTL used will be
be a default configured by the -t option.

The script will cache the authentication token and the DNS records for
10 minutes, so if you run this script multiple times in a short
period of time, it will not re-authenticate or re-fetch the DNS records.

=cut

unless ( defined $config->login_id and defined $config->login_secret and
         defined $config->login_username and defined $config->login_password ) {
  require Pod::Usage;
  Pod::Usage::pod2usage( { -message => "Missing login credential(s)!",
                           -exitval => 1,
                           -verbose => 1,
                         });
}

my $domain = shift;

unless ( defined $domain ) {
  require Pod::Usage;
  Pod::Usage::pod2usage( { -message => "No domain specified!",
                           -exitval => 1,
                           -verbose => 1,
                         });
}

print "Updating domain '$domain'.\n" if $config->verbose;

# www.example.com = $ssld.$sld.$tld
my @domains = split /\./, $domain;
my $tld = pop @domains;
my $sld = pop @domains;
my $ssld = join '.', @domains;
$domain = "$sld.$tld";
if ($ssld ne '') {
  $ssld .= '.';
}

my $content = shift;
unless ( $config->ddns or $config->delete or defined $content ) {
  require Pod::Usage;
  Pod::Usage::pod2usage( { -message => "No content specified!",
                           -exitval => 1,
                           -verbose => 1,
                         });
}

my $ua = LWP::UserAgent->new( timeout => 10 );

#
# Figure out our current public IPv4 address unless specified
#
if ( $config->ddns and not $config->delete and not defined $content ) {

  my $r = HTTP::Request::Common::GET($config->getip);
  my $response = $ua->request($r);
  die "Invalid response: $response->{'_content'}" unless $response->is_success;

  $content = $response->{'_content'}; chomp($content);

  print "Our IP address is '$content'\n" if $config->verbose;
}

print "Using content '$content'.\n" if defined $content and $config->verbose;

tie my %cache, 'DB_File', $config->cache, O_CREAT|O_RDWR, 0600;

if ( $config->clear ) {
  delete $cache{'auth.expires'};
  delete $cache{"dns.$domain.timestamp"};
}

#
# Get authentication token if necessary
#
unless ( exists $cache{'auth.expires'} and $cache{'auth.expires'}>time() ) {

  print "Requesting new authentication token.\n" if $config->verbose;

  my %data = (
    grant_type => 'password',
    client_id => $config->login_id,
    client_secret => $config->login_secret,
    username => $config->login_username,
    password => $config->login_password,
    scope => 'whmcs-access',
  );

  my $r = HTTP::Request::Common::POST('https://api.vimexx.nl/auth/token', [ %data ]);
  my $response = $ua->request($r);
  die "Unable to get authentication token: $response->{'_content'}" unless $response->is_success;

  print "Received new authentication code.\n" if $config->verbose;

  my $decoded = decode_json $response->decoded_content;
  dd $decoded if $config->debug;
  map { $cache{"auth.$_"} = $decoded->{$_} } keys %{$decoded};
  $cache{'auth.expires'} = $decoded->{'expires_in'} + time() - 3600;
} else {
  print "Using cached authentication token.\n" if $config->verbose;
}

my %data = (
  body => { 'sld' => $sld, 'tld' => $tld },
  version => '7.7.1-release.1',
);

my $records;

#
# Get DNS records.
#
unless ( exists $cache{"dns.$domain.timestamp"} and $cache{"dns.$domain.timestamp"}+600>time() ) {

  print "Requesting DNS records for $domain.\n" if $config->verbose;

  my $auth_resolver;

  unless ( $config->nons) {

    # Get the authoritative nameservers for this domain
    my $resolver = Net::DNS::Resolver->new;
    my $ns_query = $resolver->query($domain, 'NS');
    die "No NS records found\n" unless $ns_query;

    # Get the first nameserver
    my ($ns_record) = grep { $_->type eq 'NS' } $ns_query->answer;
    my $auth_ns = $ns_record->nsdname;
    $auth_resolver = Net::DNS::Resolver->new(
      nameservers => [$auth_ns],
      recurse     => 0,  # no recursion
      debug       => 0,
    );
  }

  # Get the DNS records for this domain
  my $r = HTTP::Request::Common::POST('https://api.vimexx.nl/api/v1/whmcs/domain/dns',
                                      'Authorization' => $cache{'auth.token_type'} . ' ' . $cache{'auth.access_token'},
                                      'Content' => encode_json \%data);
  my $response = $ua->request($r);
  die "Unable to get DNS records: $response->{'_content'}" unless $response->is_success;

  my $decoded = decode_json($response->decoded_content)->{data};

  printf("Received %d records.\n", scalar @{$decoded->{'dns_records'}}) if $config->verbose;

  # Cleanup: add ttl fields and remove unnecessary prio fields
  foreach my $record ( @{$decoded->{'dns_records'}} ) {
    # Remove prio field if not needed
    delete $record->{'prio'} unless defined $record->{'prio'};

    # Set default TTL for this record
    $record->{'ttl'} = $ttl{$config->record_ttl};

    # Skip if we don't need to query the actual TTL
    next if $config->nons;

    # Try and use NS to set actual TTL
    my $query = $auth_resolver->send($record->{'name'}, $record->{'type'});
    die "Query to authorative NS failed\n" unless $query;

    foreach my $rr ($query->answer) {
      if ( 'MX' eq $record->{'type'} ) {
        my $mx = $rr->exchange . '.';
        next unless $mx eq $record->{'content'};
        $record->{'ttl'} = $rr->ttl;
        printf("Found TTL %d for MX record %s\n", $record->{'ttl'}, $record->{'content'}) if $config->verbose;
        last;
      } else {
        $record->{'ttl'} = $rr->ttl;
        printf("Found TTL %d for %s record %s\n", $record->{'ttl'}, $record->{'type'}, $record->{'name'}) if $config->verbose;
        last;
      }
    }
  }

  $records = $decoded->{'dns_records'};

  # Update the cache with the records we have
  $cache{"dns.$domain.timestamp"} = time();
  $cache{"dns.$domain"} = encode_json $records;

} else {
  # Valid DNS records are found for this domain
  $records = decode_json $cache{"dns.$domain"};
  printf("Loaded %d cached DNS records.\n", scalar @{$records}) if $config->verbose;
}

dd $records if $config->debug;

#
# The record we're about to add/delete/update
#
my %new_record = (
  content => $content,
  name    => $config->record_name . '.' . $ssld . $domain . '.',
  ttl     => $ttl{$config->record_ttl},
  type    => $config->record_type,
);

if ( $config->ddns ) {
  # Set a DNS A record, this is not a challenge
  $new_record{'name'} = $ssld . $domain . '.';
}

# Did anything actually change?
my $dns_changed = 0;

# Did we find a previous version of this record?
my $found_old = 0;

#
# Loop over all the records, and add/delete/update as necessary.
# This is not bullet proof. Things can get messy when updating similar
# records, e.g. MX records. For this reason, the only records supported
# are A en TXT records, for dynamic dns and DNS-01 challenges resp.
#
foreach my $record ( @{$records} ) {
  if ( $record->{'type'} eq $new_record{'type'} and
       $record->{'name'} eq $new_record{'name'} ) {

    # Found old record
    $found_old = 1;

    if ( $config->delete ) {

      # Something is changing, i.e., delete this record
      printf("Deleting DNS '%s' record '%s'\n", $record->{'type'}, $record->{'name'}) unless $config->quiet;
      $dns_changed = 1;

    } elsif ( $record->{'content'} eq $new_record{'content'} ) {

      # Nothing actually changed, just keep this record
      printf("Unchanged DNS '%s' record '%s' -> '%s'\n", $record->{'type'}, $record->{'name'}, $new_record{'content'}) if $config->verbose;
      push @{$data{'body'}{'dns_records'}} , $record;

    } else {

      # The record actually changed
      printf("Updating DNS '%s' record '%s' -> '%s'\n", $record->{'type'}, $record->{'name'}, $new_record{'content'}) unless $config->quiet;
      push @{$data{'body'}{'dns_records'}} , \%new_record;
      $dns_changed = 1;

    }

  } else {

    # Not interested in this record, just keep it as-is
    push @{$data{'body'}{'dns_records'}} , $record;

  }
}

# Finally, if the new_record was in fact totally new, add it here
unless ( $found_old ) {
  printf("Adding DNS '%s' record '%s' -> '%s'\n", $new_record{'type'}, $new_record{'name'}, $new_record{'content'}) unless $config->quiet;
  push @{$data{'body'}{'dns_records'}} , \%new_record;
  $dns_changed = 1;
}

#dd $data{'body'}{'dns_records'} if $config->debug;

#
# And update DNS records
#
if ( $dns_changed and not $config->dryrun ) {
  my $r = HTTP::Request::Common::PUT('https://api.vimexx.nl/api/v1/whmcs/domain/dns',
                                     'Authorization' => $cache{'auth.token_type'} . ' ' . $cache{'auth.access_token'},
                                     'Content' => encode_json \%data);
  my $response = $ua->request($r);
  die "Unable to set DNS records: $response->{'_content'}" unless $response->is_success;

  printf("Succesfully updated %d DNS records.\n", scalar @{$data{'body'}{'dns_records'}}) if $config->verbose;

  # Update the cache with the DNS records we just created
  $cache{"dns.$domain.timestamp"} = time();
  $cache{"dns.$domain"} = encode_json $data{'body'}{'dns_records'};
} elsif ( $config->verbose ) {
  print "No DNS records modified, nothing to do.\n" unless $dns_changed;
  print "Not writing updates (-dryrun).\n" if $dns_changed and $config->dryrun;
}

print "Finished.\n" if $config->verbose;
